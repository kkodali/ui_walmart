[{"E:\\PffCoding\\walmart\\ui_walmart\\src\\App.tsx":"1","E:\\PffCoding\\walmart\\ui_walmart\\src\\index.tsx":"2","E:\\PffCoding\\walmart\\ui_walmart\\src\\AddProductForm.tsx":"3","E:\\PffCoding\\walmart\\ui_walmart\\src\\ProductList.tsx":"4"},{"size":5181,"mtime":1609885368781,"results":"5","hashOfConfig":"6"},{"size":217,"mtime":1609874754607,"results":"7","hashOfConfig":"6"},{"size":4009,"mtime":1609877964234,"results":"8","hashOfConfig":"6"},{"size":2317,"mtime":1609885317399,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12","usedDeprecatedRules":"13"},"1vqzvfl",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"E:\\PffCoding\\walmart\\ui_walmart\\src\\App.tsx",["21","22","23"],"import React, { useState } from \"react\";\nimport { ProductList } from \"./ProductList\";\nimport { AddProductForm } from \"./AddProductForm\";\nimport { useQuery, QueryCache, ReactQueryCacheProvider } from \"react-query\";\nimport axios from \"axios\";\nimport \"../node_modules/tachyons/css/tachyons.min.css\";\n\nconst queryCache = new QueryCache();\n\nconst initialProducts: Product[] = [\n  {\n    complete: false,\n    dessert: \"\",\n    calories: 0,\n    fat: 0,\n    carbs: 0,\n    protien: 0,\n    selected: false,\n  },\n];\n\nfunction App() {\n  const [products, setProducts] = useState(initialProducts);\n  const [addnew, toggleAddItem] = useState(false);\n  const toggle = () => toggleAddItem(!addnew);\n  const dismiss = () => {\n    if (addnew === true) {\n      toggleAddItem(!addnew);\n    }\n  };\n  const { data } = usePosts();\n\n  // const [ sort, updateProducts] = useState('desc');\n\n  // function onSort(column) {\n  //  const sortedData = products.sort((a, b) => {\n  //     if (column === 'dessert') {\n  //       const nameA = a.dessert.toUpperCase();\n  //       const nameB = b.dessert.toUpperCase();\n  //       if (nameA < nameB) {\n  //         return -1;\n  //       }\n  //       if (nameA > nameB) {\n  //         return 1;\n  //       }\n\n  //       // names must be equal\n  //       return 0;\n  //     } else if (column === 'calories') {\n  //       return a.calories - b.calories;\n  //     }\n  //   });\n      \n  //   if (sort === 'desc') {\n  //     sortedData.reverse();\n  //   }\n    \n  //   setProducts({\n  //     data: sortedData,\n  //     sort: {\n  //       direction,\n  //     }\n  //   });\n  // };\n\n  function usePosts() {\n    return useQuery(\"posts\", async () => {\n      await axios({\n        url: \"http://localhost:4000/graphql\",\n        method: \"post\",\n        data: {\n          query: `{\n            products{\n                dessert\n                calories\n                fat\n                carbs\n                protien\n            }\n          }`,\n        },\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((result) => {\n          if (products.length === 1) {\n            setProducts(result.data.data.products);\n          }\n        })\n        .catch((err) => {\n          console.log(err.message);\n        });\n    });\n  }\n\n  const toggleProduct = (selectedProduct: Product) => {\n    const newTodos = products.map((todo) => {\n      if (todo === selectedProduct) {\n        return {\n          ...todo,\n          complete: !todo.complete,\n          selected: !todo.selected,\n        };\n      }\n      return todo;\n    });\n    setProducts(newTodos);\n  };\n\n  const addProduct: AddTodo = (\n    dessert: string,\n    calories: number,\n    fat: number,\n    carbs: number,\n    protien: number,\n    selected: boolean\n  ) => {\n    const newProduct = {\n      dessert,\n      calories,\n      fat,\n      carbs,\n      protien,\n      complete: false,\n      selected: false,\n    };\n    setProducts([...products, newProduct]);\n    toggle();\n  };\n\n  return (\n    <ReactQueryCacheProvider queryCache={queryCache}>\n      <>\n        <div\n          className=\"pa4-ns pa0 bg-moon-gray f6 w-100 min-vh-100 mw8 center\"\n          onClick={dismiss}\n        >\n          <div className=\"overflow-auto\">\n            <section className=\"ph4\">\n              <article className=\"mw8 bg-grey\">\n                <div className=\"dt-ns dt--fixed-ns w-100 bg-grey\">\n                  <div className=\"ph3 fl v-mid\">\n                    <h2>Nutrition List</h2>\n                  </div>\n                  <div className=\"pa3 fr v-mid\">\n                    <a\n                      href=\"/\"\n                      className=\"no-underline pa3 f7 tc db w-100 pv2 bg-green  white br2\"\n                    >\n                      RESET DATA\n                    </a>\n                  </div>\n                </div>\n              </article>\n            </section>\n            <section className=\"ph4\">\n              <article className=\"mw8\">\n                <div className=\"dt-ns dt--fixed-ns w-100 ba b--light-pink  bg-pink\">\n                  <div className=\"pa3 fl v-mid\">\n                    <div>\n                      <p className=\"black-70 measure lh-copy mv0\">0 selected</p>\n                    </div>\n                  </div>\n                  <div className=\"pa3-ns pa0 fr v-mid\">\n                    <a\n                      href=\"#\"\n                      className=\"no-underline pa3 f7 tc db w-100 pv2 bg-red  white br2\"\n                    >\n                      DELETE\n                    </a>\n                  </div>\n                  <div className=\"pa3-ns pa0 fr v-mid\">\n                    <a\n                      href=\"#\"\n                      onClick={toggle}\n                      className=\"no-underline pa3 f7 tc db w-100 pv2 bg-white  green br2\"\n                    >\n                      + ADD NEW\n                    </a>\n                  </div>\n                </div>\n              </article>\n            </section>\n          </div>\n          <ProductList products={products} toggleProduct={toggleProduct} />\n        </div>\n        {addnew ? <AddProductForm addProduct={addProduct} /> : \"\"}\n      </>\n    </ReactQueryCacheProvider>\n  );\n}\n\nexport default App;\n",["24","25"],"E:\\PffCoding\\walmart\\ui_walmart\\src\\index.tsx",[],"E:\\PffCoding\\walmart\\ui_walmart\\src\\AddProductForm.tsx",[],["26","27"],"E:\\PffCoding\\walmart\\ui_walmart\\src\\ProductList.tsx",[],{"ruleId":"28","severity":1,"message":"29","line":31,"column":11,"nodeType":"30","messageId":"31","endLine":31,"endColumn":15},{"ruleId":"32","severity":1,"message":"33","line":166,"column":21,"nodeType":"34","endLine":169,"endColumn":22},{"ruleId":"32","severity":1,"message":"33","line":174,"column":21,"nodeType":"34","endLine":178,"endColumn":22},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"35","replacedBy":"39"},{"ruleId":"37","replacedBy":"40"},"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-native-reassign",["41"],"no-negated-in-lhs",["42"],["41"],["42"],"no-global-assign","no-unsafe-negation"]